PARSER_BEGIN(comp)

import java.io.File;
class comp {
	
        public comp(File file){
        
        }
        
        public static void main( String[] args )throws ParseException{
		
                try{
                        File file = new File("/home/hectorceja/NetBeansProjects/Analizador/src/analizador");
                       
			comp analizador = new comp( file ) ;
			analizador.Programa() ; 
		}
		catch(ParseException e){
			System.out.println(e.getMessage());
			System.out.println("Analizador: Se han encontrado errores en el analisis.");
		}
	}

        
}

PARSER_END(comp)

SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" 
}
TOKEN:
{
	  <TYPES:"int"|"double"|"String"|"char">{System.out.println("ENTERO -> "+image);}
	| <NUMBER : (["0"-"9"])+ > {System.out.print("NUMERO "+image+"\r\n");}
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.print("IDENTIFICADOR -> "+image+"\r\n");}
	| <CADENA : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*>{System.out.print("CADENA -> "+image+"\r\n");}
}
TOKEN : 
{ 
	  <ASIGNACION : "="> {System.out.println("ASIGNACION -> "+image+"\r\n");}
	| <PLUS : "+" > {System.out.println("MAS -> "+image+"\r\n");}
	| <MINUS:"-">{System.out.println("MENOS -> "+image+"\r\n");}
	| <MULTIPLY:"*">{System.out.println("MULTIPLICAR -> "+image+"\r\n");}
	| <DIVIDE:"/">{System.out.println("DIVIDIR -> "+image+"\r\n");}
	| <INCR: "++" >{System.out.println("INCREMENTO -> "+image+"\r\n");}
	| <DECR: "--" >{System.out.println("DECREMENTO -> "+image+"\r\n");}
	
}
TOKEN:
{
	 
        | <PUBLIC: "public">{System.out.println("PUBLIC -> "+image);}
|   <BOOLEAN: "boolean">
|   <CLASS: "class">
|   <COMMER: ",">
|   <DOT: ".">
|   <ELSE: "else">
|   <EXTENDS: "extends">
|   <FALSE: "false">
|   <IF: "if">
|   <INT: "int">
|   <LENGTH: "length">
|   <MAIN: "main">
|   <NEW: "new">
|   <NOT: "!">
|   <OUT: "out">
|   <PRINTLN: "println">
|   <PUBLIC: "public">
|   <RETURN: "return">
|   <STATIC: "static">
|   <STRING: "String">
|   <SYSTEM: "System">
|   <THIS: "this">
|   <TRUE: "true">
|   <VOID: "void">
|   <ID: (<LETTER>|"_")+(<LETTER>|<DIGIT>)*>
	| <PROGRAMA: "Programa " > {System.out.println("PROGRAMA -> "+image);}
	| <IF: "if" >{System.out.println("IF -> "+image);}
	| <ELSE:"else" >{System.out.println("ELSE -> "+image);}
	| <ELSEIF:"else if" >{System.out.println("ELSE IF -> "+image);}
	| <FOR:"for" >{System.out.println("FOR -> "+image);}
	| <SWITCH:"switch" >{System.out.println("SWITCH -> "+image);}
	| <CASE:"case" >{System.out.println("CASE -> "+image);}
	| <BREAK:"break" >{System.out.println("BREAK -> "+image);}
	| <DEFAUL:"default" >{System.out.println("DEFAUL -> "+image);}
	| <DO:"do " >{System.out.println("DO -> "+image);}
	| <WHILE:"while" >{System.out.println("WHILE -> "+image);}
	| <WRITE:"System.out.println" >{System.out.println("WRITE -> "+image);}
	| <READ:"read" >{System.out.println("READ -> "+image);}
}
TOKEN:
{
      <LPAREN: "(" >{System.out.println("IPAREN -> "+image);}
	| <RPAREN: ")" >{System.out.println("DPAREN -> "+image);}
	| <LBRACE: "{" >{System.out.println("ILLAVE -> "+image);}
	| <RBRACE: "}" >{System.out.println("DLLAVE -> "+image);}
	| <LBRACKET: "[" >{System.out.println("ICORC -> "+image);}
	| <RBRACKET: "]" >{System.out.println("DCORC -> "+image);}
	| <SEMICOLON: ";" >{System.out.println("PUNTO Y COMA -> "+image);}
	| <COMMA: "," >{System.out.println("COMA -> "+image);}
	| <DOT: "." >{System.out.println("PUNTO -> "+image);}
}
TOKEN:
{
	  <EQ: "==" >{System.out.println("IGUALACION -> "+image);}
	| <LE: "<=" >{System.out.println("MENOR O IGUAL -> "+image);}
	| <GE: ">=" >{System.out.println("MAYOR O IGUAL -> "+image);}
	| <NE: "!=" >{System.out.println("DIFERENTE -> "+image);}
	| <OR: "||" >{System.out.println("OR -> "+image);}
	| <AND: "&&">{System.out.println("AND -> "+image);}
}

void Programa() :
{}
{
	<PROGRAMA><IDENTIFIER><LBRACE>Bloque()<RBRACE><EOF>
	
}
void Bloque():
{}
{
	DeclaracionGlobal() | Principal()
}
void DeclaracionGlobal():
{}
{
	<TYPES>VariablesGlobales()	
}

void VariablesGlobales():
{}
{
	/*<IDENTIFIER>", "<IDENTIFIER> |*/ <IDENTIFIER> <SEMICOLON> W()
}
void W():
{}
{
	DeclaracionGlobal() | Principal()	
}

void Principal():
{}
{
	<MAIN>
	<LBRACE>Sentencias()<RBRACE>
}

void DeclaracionLocal():
{}
{
	<TYPES>VariablesLocales()
}
void VariablesLocales():
{}
{
	/*<IDENTIFIER>", "<IDENTIFIER> | */<IDENTIFIER> <SEMICOLON> VS()
}

void VS():
{}
{
	DeclaracionLocal() | Sentencias()
}

void Sentencias():
{}
{
 (
	  DeclaracionLocal()
    | SentenciaIf() 	
	| SentenciaFor()
	| SentenciaDo()	
	| SentenciaAsignacion()
	| SentenciaWrite()
	| SentenciaRead()	
	|<EOF>
	//| SentenciaSwitch()
	/*| Sentencias()  Left Recursion: Poner Sentencias() a la finalizacion de cada metodo?*/
 )*
}

//Sentencia IF
void SentenciaIf():
{}
{
	<IF><LPAREN> A() <RPAREN> <LBRACE> Sentencias() <RBRACE> /*|	
	"if " "( " A() ") " "{ "Sentencias()"} ""else "*/
}
/*void Sino():
{}
{
	"else " "{ "Sentencias()"} "
}*/
void A():
{}
{
	  Comparaciones()
	/*| Comparaciones() "&& " Comparaciones()
	| Comparaciones() "|| " Comparaciones()*/
}
//Fin sentencia if

void Comparaciones():
{}
{
	Valor()Operadores()Valor()
}
void Valor():
{}
{
	<IDENTIFIER> | <NUMBER> /*| Expresion()*/
}
void Expresion():
{}
{
	/*<NUMBER> | <IDENTIFIER> |*/ <IDENTIFIER><PLUS><IDENTIFIER><SEMICOLON> /*| <NUMBER> OpAritmetico() <NUMBER> | 
	<IDENTIFIER> OpAritmetico() <IDENTIFIER>|
	<IDENTIFIER> OpAritmetico() <NUMBER> | <IDENTIFIER> */
}

void Operadores():
{}
{
	  <EQ> | <LE> |<GE>|<NE> 
}
void OpAritmetico():
{}
{
	<PLUS>|<MINUS>|<MULTIPLY>|<DIVIDE>
}
//Sentencia FOR
void SentenciaFor():
{}
{
	<FOR> <LPAREN> SentenciaAsignacion() <SEMICOLON> Comparaciones() SentenciaAsignacion() <RPAREN> <LBRACE> Sentencias() <RBRACE>/*|
	"for " "( " SentenciaAsignacion() "; " Comparaciones() SentenciaAsignacion() ") " "{ " Sentencias() "} "Sentencias()*/
}

//Sentencia DO
void SentenciaDo():
{}
{
	<DO> <LBRACE>Sentencias() <RBRACE> <WHILE> <LPAREN> Comparaciones() <RPAREN> /*|
	"do " "( " Comparaciones() ") " "{ " Sentencias() "} "	*/
}

//Sentencia ASIGNACION
void SentenciaAsignacion():
{}
{
	<IDENTIFIER> <ASIGNACION> Expresion()
}

//Sentencia WRITE
void SentenciaWrite():
{}
{
	<WRITE> <LPAREN> Expresion() <RPAREN> <SEMICOLON> /*|
	"write " "( " "^ " <CADENA> "^ " ") " "; "*/
}

//Sentencia READ
void SentenciaRead():
{}
{
	<READ><LPAREN><RPAREN><SEMICOLON>
}


